require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe CommentsController, type: :controller do
  # This should return the minimal set of attributes required to create a valid
  # Comment. As you add validations to Comment, be sure to
  # adjust the attributes here as well.


    # This should return the minimal set of values that should be in the headers
    # in order to pass any filters (e.g. authentication) defined in
    # CommentsController, or in your router and rack
    # middleware. Be sure to keep this updated too.
    
    let(:article) {create :article}



    describe "GET #index" do
        subject { get :index, params: { article_id: article.id }}

        it "renders a successful response" do
            get :index, params: { article_id: article.id }
            expect(response).to have_http_status(:ok)
        end

        it 'should return only comments belongs to article' do 
            comment = create(:comment, article: article)
            create  :comment
            subject
            expect(json_data.length).to eq(1)
            expect(json_data.first[:id]).to eq(comment.id.to_s)
        end

        it 'should paginate result' do 
            comments = create_list :comment, 3, article: article
            get :index, params: {article_id: article.id, per_page: 1, page: 2 }
            expect(json_data.length).to eq(1)
            expect(json_data.first[:id]).to eq(comments.second.id.to_s)
        end

        it 'should have proper json body' do 
            comment = create :comment, article: article
            subject 
            expect(json_data.first[:attributes]).to include({
                :content => comment.content,

            })
        end

        it 'should have related objects information in the response' do 
            user = create :user
            comment = create :comment, article: article, user: user
            subject 
            relationships = json_data.first[:relationships]
            expect(relationships[:article][:data][:id]).to eq(article.id.to_s)
            expect(relationships[:user][:data][:id]).to eq(user.id.to_s)

        end
    end


    describe "POST /create" do


        context 'when unauthorized' do 
            subject { post :create, params: {article_id: article.id }}
            it_behaves_like 'forbidden_requests'
        end

        context 'when authorized' do 
            let(:valid_attributes) {
                {
                    content: 'valid content'
                }
            }
        
            let(:invalid_attributes) {{ content: '' }}

            let(:user){ create :user }
            let(:access_token) { user.create_access_token }
            let(:valid_headers) {
                {"Authorization": "Bearer #{access_token.token}"}
            }

            before { request.headers.merge!(valid_headers) }


            context "with valid parameters" do

                subject {post :create, params: { article_id: article.id, comment: valid_attributes }, as: :json}
                
                it 'should return 201 status code' do 
                    subject 
                    expect(response).to have_http_status(:created)
                end

                it "creates a new Comment" do
                    expect { subject }.to change(article.comments, :count).by(1)
                end
    

            end
    
            context "with invalid parameters" do
                subject {post :create, params: { article_id: article.id, comment: invalid_attributes }, as: :json}
    
                it "does not create a new Comment" do
                    expect {subject}.to change(Comment, :count).by(0)
                end
    
                it "renders a JSON response with errors for the new comment" do
                    subject
                    expect(response).to have_http_status(:unprocessable_entity)
                    expect(response.content_type).to match(a_string_including("application/json"))
                end
            end
        end
        
    end

  
end
